{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","data","id","nombre","apellido","telefono","correo","edad","estado","url","App","state","modalActualizar","modalInsertar","form","peticionPut","a","console","log","axios","put","then","response","peticionGet","setState","peticionPost","post","catch","error","window","alert","message","peticionDelete","confirm","delete","get","users","mostrarModalActualizar","dato","cerrarModalActualizar","mostrarModalInsertar","cerrarModalInsertar","handleChange","e","target","name","value","this","Container","Button","color","onClick","Table","map","key","Modal","isOpen","ModalHeader","ModalBody","FormGroup","required","className","type","onChange","defaultValue","ModalFooter","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd9cf0f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\"\r\nimport axios from \"axios\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  Table,\r\n  Button,\r\n  Container,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  FormGroup,\r\n  ModalFooter,\r\n} from \"reactstrap\";\r\n\r\n\r\n\r\nconst data=[\r\n  { id: 1, nombre: \"Juan Alberto\", apellido: \"Alcantara\", telefono:\"5515123712\", correo:\"alberto.blue.19@gmail.com\",edad:28,estado:\"Nuevo\" },\r\n  { id: 2, nombre: \"Eduardo\", apellido: \"Hernandez\", telefono:\"5515123712\", correo:\"alberto.blue.19@gmail.com\",edad:28,estado:\"No interesado\" },\r\n  { id: 3, nombre: \"Cesar villaluz\", apellido: \"Naruto\", telefono:\"5515123712\", correo:\"alberto.blue.19@gmail.com\",edad:28,estado:\"Información equivocada\" },\r\n  \r\n];\r\n\r\nconst url=\"http://148.206.32.239:5000\"\r\n\r\nclass App extends React.Component {\r\n\r\n  \r\n\r\n  state = {\r\n    data: data,\r\n    modalActualizar: false,\r\n    modalInsertar: false,\r\n    form: {\r\n      id: \"\",\r\n      nombre: \"\",\r\n      apellido: \"\",\r\n      telefono: \"\",\r\n      correo: \"\",\r\n      edad: \"\",\r\n    },\r\n  };\r\n  peticionPut=async (data)=>{\r\n    console.log(\"El id que recibo es: \",data.id);\r\n    await axios.put(url+'/update/'+data.id, this.state.form).then(response=>{\r\n      console.log(response);\r\n      this.peticionGet();\r\n      this.setState({ modalActualizar: false})\r\n    })\r\n  }\r\n\r\n  peticionPost=async()=>{\r\n    delete this.state.form.id;\r\n    console.log(\"Lo que recibo es: \",this.state.form)\r\n   await axios.post(url+'/add',this.state.form).then(response=>{\r\n     console.log(\"La respuesta al añadir un usuario es: \",response);\r\n      this.setState({\r\n        modalInsertar: false,\r\n      });\r\n      this.peticionGet();\r\n     \r\n    }).catch(error=>{\r\n      this.setState({\r\n        modalInsertar: false,\r\n      });\r\n      window.alert(\"Error con los datos ingresados\");\r\n      \r\n      console.log(error.message);\r\n    })\r\n  }\r\n\r\n\r\n  peticionDelete=(id)=>{\r\n    var opcion = window.confirm(\"Estás Seguro que deseas Eliminar el elemento \"+id);\r\n\r\n    if(opcion){\r\n      axios.delete(url+'/delete/'+id, this.state.form).then(response=>{\r\n        console.log(response);\r\n        this.peticionGet();\r\n      })\r\n\r\n    }\r\n    \r\n  }\r\n\r\n  peticionGet=()=>{\r\n    axios.get(url+'/users').then(response=>{\r\n      console.log(response.data);\r\n      this.setState({data: response.data.users});\r\n    }).catch(error=>{\r\n      console.log(error.message);\r\n    })\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.peticionGet();\r\n    }\r\n\r\n  \r\n  \r\n\r\n  mostrarModalActualizar = (dato) => {\r\n    this.setState({\r\n      form: dato,\r\n      modalActualizar: true,\r\n    });\r\n  };\r\n\r\n  cerrarModalActualizar = () => {\r\n    this.setState({ modalActualizar: false });\r\n  };\r\n\r\n  mostrarModalInsertar = () => {\r\n    this.setState({\r\n      modalInsertar: true,\r\n    });\r\n  };\r\n\r\n  cerrarModalInsertar = () => {\r\n    this.setState({ modalInsertar: false });\r\n  };\r\n\r\n\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      form: {\r\n        ...this.state.form,\r\n        [e.target.name]: e.target.value,\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <>\r\n        <Container>\r\n        <br />\r\n          <Button color=\"success\" onClick={()=>this.mostrarModalInsertar()}>Crear</Button>\r\n          <br />\r\n          <br />\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>Nombre</th>\r\n                <th>Apellido</th>\r\n                <th>Telefono</th>\r\n                <th>Correo</th>\r\n                <th>Edad</th>\r\n                <th>Estado</th>\r\n                <th>Acciones</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              {this.state.data.map((dato) => (\r\n                <tr key={dato.id}>\r\n                  <td>{dato.id}</td>\r\n                  <td>{dato.nombre}</td>\r\n                  <td>{dato.apellido}</td>\r\n                  <td>{dato.telefono}</td>\r\n                  <td>{dato.correo}</td>\r\n                  <td>{dato.edad}</td>\r\n                  <td>{dato.estado}</td>\r\n                  <td>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      onClick={() => this.mostrarModalActualizar(dato)}\r\n                    >\r\n                      Editar\r\n                    </Button>{\" \"}\r\n                    <Button color=\"danger\" onClick={()=> this.peticionDelete(dato.id)}>Eliminar</Button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n\r\n        <Modal isOpen={this.state.modalActualizar}>\r\n          <ModalHeader>\r\n           <div><h3>Editar</h3></div>\r\n          </ModalHeader>\r\n\r\n          <ModalBody>\r\n            \r\n            <FormGroup>\r\n              <label>\r\n                Nombre: \r\n              </label>\r\n              <input\r\n                required\r\n                className=\"form-control\"\r\n                name=\"nombre\"\r\n                type=\"text\"\r\n                onChange={this.handleChange}\r\n                value={this.state.form.nombre}\r\n              />\r\n            </FormGroup>\r\n            \r\n            <FormGroup>\r\n              <label>\r\n                Apellido: \r\n              </label>\r\n              <input\r\n                required\r\n                className=\"form-control\"\r\n                name=\"apellido\"\r\n                type=\"text\"\r\n                onChange={this.handleChange}\r\n                value={this.state.form.apellido}\r\n              />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <label>\r\n                Telefono: \r\n              </label>\r\n              <input\r\n                required\r\n                className=\"form-control\"\r\n                name=\"telefono\"\r\n                type=\"text\"\r\n                onChange={this.handleChange}\r\n                value={this.state.form.telefono}\r\n              />\r\n            </FormGroup>\r\n\r\n\r\n            <FormGroup>\r\n              <label>\r\n                Correo: \r\n              </label>\r\n              <input\r\n                required\r\n                className=\"form-control\"\r\n                name=\"correo\"\r\n                type=\"email\"\r\n                onChange={this.handleChange}\r\n                value={this.state.form.correo}\r\n              />\r\n            </FormGroup>\r\n\r\n\r\n            <FormGroup>\r\n              <label>\r\n                Edad: \r\n              </label>\r\n              <input\r\n                required\r\n                className=\"form-control\"\r\n                name=\"edad\"\r\n                type=\"number\"\r\n                onChange={this.handleChange}\r\n                value={this.state.form.edad}\r\n              />\r\n            </FormGroup>\r\n\r\n\r\n            <FormGroup>\r\n\r\n            <select  name=\"estado\" onChange={this.handleChange} >\r\n                  <option defaultValue={\"Nuevo\"} >Selecciona un estado</option>\r\n                  <option value=\"Nuevo\">Nuevo</option>\r\n                  <option value=\"No interesado\">No interesado</option>\r\n                  <option value=\"Número equivocado\">Número equivocado</option>\r\n                  <option value=\"Información equivocada\">Información equivocada</option>\r\n                  <option value=\"Alto potencial\">Alto potencial</option>\r\n                  <option value=\"Bajo potencial\">Bajo potencial</option>\r\n           </select>\r\n\r\n\r\n            </FormGroup>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button\r\n              color=\"primary\"\r\n              onClick={() => this.peticionPut(this.state.form)}\r\n            >\r\n              Editar\r\n            </Button>\r\n            <Button\r\n              color=\"danger\"\r\n              onClick={() => this.cerrarModalActualizar()}\r\n            >\r\n              Cancelar\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n\r\n\r\n        <Modal isOpen={this.state.modalInsertar}>\r\n          <ModalHeader>\r\n           <div><h3>Insertar</h3></div>\r\n          </ModalHeader>\r\n\r\n          <ModalBody>\r\n            \r\n            <FormGroup>\r\n              <label>\r\n                Nombre: \r\n              </label>\r\n              <input\r\n                required\r\n                className=\"form-control\"\r\n                name=\"nombre\"\r\n                type=\"text\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormGroup>\r\n            \r\n            <FormGroup>\r\n              <label>\r\n                \r\n                Apellido: \r\n              </label>\r\n              <input\r\n                required\r\n                className=\"form-control\"\r\n                name=\"apellido\"\r\n                type=\"text\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <label>\r\n                 \r\n               Telefono: \r\n              </label>\r\n              <input\r\n                required\r\n                className=\"form-control\"\r\n                name=\"telefono\"\r\n                type=\"text\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <label>\r\n               Correo: \r\n              </label>\r\n              <input\r\n                required\r\n                className=\"form-control\"\r\n                name=\"correo\"\r\n                type=\"email\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormGroup>\r\n\r\n\r\n            <FormGroup>\r\n              <label>\r\n               Edad: \r\n              </label>\r\n              <input\r\n                required\r\n                className=\"form-control\"\r\n                name=\"edad\"\r\n                type=\"number\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormGroup>\r\n\r\n          \r\n\r\n            <FormGroup>\r\n\r\n            <select  name=\"estado\" onChange={this.handleChange} >\r\n                  <option defaultValue={\"Nuevo\"} >Selecciona un estado</option>\r\n                  <option value=\"Nuevo\">Nuevo</option>\r\n                  <option value=\"No interesado\">No interesado</option>\r\n                  <option value=\"Número equivocado\">Número equivocado</option>\r\n                  <option value=\"Información equivocada\">Información equivocada</option>\r\n                  <option value=\"Alto potencial\">Alto potencial</option>\r\n                  <option value=\"Bajo potencial\">Bajo potencial</option>\r\n           </select>\r\n      \r\n      \r\n            </FormGroup>\r\n\r\n\r\n\r\n\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button\r\n              color=\"primary\"\r\n              onClick={() => this.peticionPost()}\r\n            >\r\n              Insertar\r\n            </Button>\r\n            <Button\r\n              className=\"btn btn-danger\"\r\n              onClick={() => this.cerrarModalInsertar()}\r\n            >\r\n              Cancelar\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}